#!/usr/bin/env node
const path           = require('path');
const fs             = require('fs');
const fpark          = require('./src');
const configVerifier = require('./src/config-verifier');
const whereis        = require('./lib/whereis');
const kittenLogger   = require('kitten-logger');

let _config = {};

let _path = process.cwd();

function loadConfig (pathConfig) {
  let _configPath = pathConfig ? pathConfig : path.join(_path, 'fpark.json');
  if (fs.existsSync(_configPath)) {
    _config = fs.readFileSync(_configPath, 'utf8');
    try {
      _config = JSON.parse(_config);
    }
    catch (e) {
      throw new Error('.fpark is not a valid JSON file');

    }
  }

  configVerifier(_config);
}

function printUsage () {
  console.log('Fpark CLI')
  console.log('===============================================');
  console.group('Commands');
  console.log('start', '\t\t', 'Start the server');
  console.log('run <job>', '\t\t', 'Run a job among:');
  console.log('\t\t\t', ' - distribute-space : redestribute files across nodes after changes (insert(s)/delete(s) of node(s)');
  console.log('whereis <filename>', '\t', 'Where is a file in the arborescence ?');
  console.groupEnd('Commands');
  console.log('-----------------------------------------------');
  console.group('Options');
  console.log('-c', '\t', 'Path to config');
  console.groupEnd('Options');
}

let _args     = process.argv.slice(2);
let _commands = ['start', 'run', 'whereis'];

if (_commands.indexOf(_args[0]) === -1) {
  return printUsage();
}

let _argValues = {};

for (let i = 0; i < _args.length; i++) {
  switch (_args[i]) {
    case '-c':
      _argValues['c'] = _args[i + 1] || null;
      i++;
      break;
    default:
      _argValues['param'] = _args[i];
      break;
  }
}

loadConfig(_argValues['c']);

if (Object.keys(_config).length === 0) {
  return console.error('No config found, you should provide a config with option "-c" as "-c /path/to/config.json"');
}

switch (_args[0]) {
  case 'start':
    fpark.start(_config);
    break;
  case 'run':
    if (['distribute-space'].indexOf(_argValues['param']) === -1) {
      return printUsage();
    }
    runJob(_argValues['param']);
    break;
  case 'whereis':
    whereis(_config, _argValues['param']);
    break;
}


function runJob (job) {
  const m = require(path.join(__dirname, 'jobs', job + '.js'));
  if (!m) {
    return printUsage();
  }

  // init kitten logger
  process.env.KITTEN_LOGGER_RETENTION_DIRECTORY = _config.LOGS_DIRECTORY;
  process.env.KITTEN_LOGGER_RETENTION_FILENAME  = 'jobs';
  kittenLogger.init();

  m({ config : _config }, process.exit);
}
